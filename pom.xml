<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.chirontt.jgit</groupId>
    <artifactId>jgit.http.server.native</artifactId>
    <version>5.13.0</version>
    <packaging>jar</packaging>

    <name>JGitHttpServer</name> <!-- name of the resulting native executable -->
    <description>JGit HTTP server's native executable built by GraalVM</description>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jgit.release.version>5.13.0.202109080827-r</jgit.release.version>
        <jetty.version>9.4.43.v20210629</jetty.version>
        <slf4j.version>1.7.32</slf4j.version>
        <native.maven.plugin.version>0.9.6</native.maven.plugin.version>
        <native.image.dir.name>native-image</native.image.dir.name>
        <!-- main class name for exec:exec plugin task -->
        <exec.mainClass>com.github.chirontt.gitserver.JGitHttpServer</exec.mainClass>
        <!-- default values for server port, path to git repos, and path to LFS storage -->
        <exec.port>8080</exec.port>
        <exec.base-path>/git</exec.base-path>
        <exec.lfs-path>/git-lfs-storage</exec.lfs-path>
        <!-- system properties for the application when run by exec:exec command;
             can be specified on the command line with -Dsys.props="..."
        -->
        <sys.props></sys.props>
        <!-- packages/classes to be initialized at native image build time -->
        <build.time.init>com.google.gson,javax.servlet,org.eclipse.jetty,org.eclipse.jgit,org.slf4j</build.time.init>
        <!-- packages/classes to be initialized at native image run time -->
        <run.time.init>org.eclipse.jgit.internal.storage.file.WindowCache,org.eclipse.jgit.lib.internal.WorkQueue,org.eclipse.jgit.lib.RepositoryCache,org.eclipse.jgit.transport.HttpAuthMethod,org.eclipse.jgit.util.FileUtils</run.time.init>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit.http.server</artifactId>
            <version>${jgit.release.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit.lfs.server</artifactId>
            <version>${jgit.release.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlet</artifactId>
            <version>${jetty.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>java</executable>
                    <arguments>
                        <!-- GraalVM's agent to generate (or merge with) native-image configuration files -->
                        <!-- argument>-agentlib:native-image-agent=config-merge-dir=src/main/resources/META-INF/native-image</argument -->
                        <argument>${sys.props}</argument>
                        <argument>-classpath</argument>
                        <classpath/>
                        <argument>${exec.mainClass}</argument>
                        <argument>${exec.port}</argument>
                        <argument>${exec.base-path}</argument>
                        <argument>${exec.lfs-path}</argument>
                    </arguments>
                </configuration>
            </plugin>
            <!-- create a stand-alone executable uber jar including all dependencies -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>no-deps</shadedClassifierName>
                            <filters>
                                <filter>
                                    <!-- exclude files that sign a jar -->
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <transformers>
                                <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>${exec.mainClass}</Main-Class>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.graalvm.buildtools</groupId>
                <artifactId>native-maven-plugin</artifactId>
                <version>${native.maven.plugin.version}</version>
                <executions>
                    <!-- execution>
                        <id>test-native</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                    </execution -->
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- outputDir>${project.build.directory}/${native.image.dir.name}</outputDir -->
                    <imageName>${project.name}</imageName>
                    <mainClass>${exec.mainClass}</mainClass>
                    <buildArgs>
                        <buildArg>--no-fallback</buildArg>
                        <buildArg>--enable-url-protocols=http,https</buildArg>
                        <buildArg>--initialize-at-build-time=${build.time.init}</buildArg>
                        <buildArg>--initialize-at-run-time=${run.time.init}</buildArg>
                        <buildArg>--native-image-info</buildArg>
                        <buildArg>--verbose</buildArg>
                        <!-- buildArg>-H:+TraceNativeToolUsage</buildArg -->
                        <buildArg>-H:TempDirectory=${project.build.directory}/tmp/${native.image.dir.name}</buildArg>
                        <buildArg>-H:Path=${project.build.directory}/${native.image.dir.name}</buildArg>
                    </buildArgs>
                    <skip>false</skip>
                    <!-- use the uber jar for native image compiling 
                         if long classpath is a problem in Windows
                    -->
                    <!-- classpath>
                        <param>
                            ${project.build.directory}/${project.artifactId}-${project.version}-no-deps.jar
                        </param>
                    </classpath -->
                </configuration>
            </plugin>
            <!-- remove unneeded .dll/.txt files -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>remove-unneeded-dll-files</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <target>
                        <move todir="${project.build.directory}/tmp/${native.image.dir.name}">
                            <fileset dir="${project.build.directory}/${native.image.dir.name}">
                                <include name="*.dll"/>
                                <include name="*.txt"/>
                            </fileset>
                        </move>
                    </target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
