plugins {
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.2'
}

tasks.wrapper {
    gradleVersion = '8.8'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'com.github.chirontt.jgit'
description = "JGit HTTP server's native executable built by GraalVM"
version = '6.10.0'

ext {
    mainClassName = 'com.github.chirontt.gitserver.JGitHttpServer'
    jgitReleaseVersion = '6.10.0.202406032230-r'
    jettyVersion = '10.0.22'
    slf4jVersion = '2.0.13'
}

repositories {
    mavenCentral()
    mavenLocal()
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

dependencies {
    implementation "org.eclipse.jgit:org.eclipse.jgit.http.server:$jgitReleaseVersion"
    implementation "org.eclipse.jgit:org.eclipse.jgit.lfs.server:$jgitReleaseVersion"
    implementation "org.eclipse.jetty:jetty-servlet:$jettyVersion"
    implementation "org.slf4j:slf4j-simple:$slf4jVersion"
}

application {
    mainClass = project.mainClassName
    applicationName = project.name
    executableDir = ''
}

run {
    //default parameter values for port, base-path, and lfs-path
    args = ['8080', '/git', '/git-lfs-storage']

    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
    systemProperties = System.getProperties()

    jvmArgs = [
        //use the following jvmArgs for as many different run scenarios as possible,
        //and for all the code-execution paths as much as possible,
        //to generate (or merge with) the GraalVM native-image configuration files
        //in the src/main/resources/META-INF/native-image directory.
        //This directory is read by GraalVM during the native-image build.
        //"-agentlib:native-image-agent=config-merge-dir=src/main/resources/META-INF/native-image",

        //enable debug logs of various subsystems
        //'-Djava.security.debug=all',
        //'-Djavax.net.debug=all',
        '-Dorg.eclipse.jetty.LEVEL=DEBUG',
    ]
}

//create a stand-alone executable uber jar
//including all dependencies
task uberJar(type: Jar) {
    with jar
    archiveClassifier = 'no-deps'
    manifest {
        attributes(
            'Main-Class': project.mainClassName,
            'Built-By': System.getProperty('user.name'),
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
            'Multi-Release': 'true',
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    duplicatesStrategy 'exclude'
}

graalvmNative {
    toolchainDetection = false
    binaries {
        main {
            imageName = project.name
            mainClass = project.mainClassName
            debug = true
            verbose = true
            fallback = false

            //packages/classes to be initialized at native image build time
            def buildTimeInitClasses = [
                'com.google.gson',
                'javax.servlet',
                'org.eclipse.jetty',
                'org.eclipse.jgit',
                'org.slf4j',
            ]

            //packages/classes to be initialized at native image run time
            def runTimeInitClasses = [
                'org.eclipse.jgit.internal.storage.file.WindowCache',
                'org.eclipse.jgit.lib.internal.WorkQueue',
                'org.eclipse.jgit.lib.RepositoryCache',
                'org.eclipse.jgit.transport.HttpAuthMethod',
            ]

            //packages/classes to be re-initialized at native image run time
            def runTimeReInitClasses = [
                //all org.eclipse.jgit classes are initialized at build time
                //(specified above), but due to SecureRandom seeding
                //in their static initialization blocks, some JGit classes need be
                //re-initialized at native image run time:
                'org.eclipse.jgit.util.FileUtils:rerun',
            ]

            buildArgs.add('--enable-url-protocols=http,https')
            buildArgs.add('--initialize-at-build-time=' + buildTimeInitClasses.join(','))
            buildArgs.add('--initialize-at-run-time=' + runTimeInitClasses.join(','))
            buildArgs.add('-H:ClassInitialization=' + runTimeReInitClasses.join(','))
            buildArgs.add('-march=compatibility') //only available in GraalVM for JDK 17+

            useFatJar = false
        }
    }
}

tasks.named("nativeCompile") {
    //use the uber jar if long classpath becomes a problem in Windows:
    //dependsOn uberJar
    //classpathJar = uberJar.archiveFile
}

